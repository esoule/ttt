AC_INIT()
AC_CONFIG_AUX_DIR(cf)
AC_PROG_CC
AC_EXEEXT
AC_OBJEXT

# -----------------------------------------------------------------------
#
# 	Handle command line options
#
#		--with-tcl=DIR
#		--with-tk=DIR
#		--with-blt=DIR
#		--with-pcap=DIR
#		--with-cc=CC		
#		--enable-ipv6, --disable-ipv6
#
# -----------------------------------------------------------------------

tttIncludes=""
tttLibraries=""
tttAuxLibs=""
tttRunPath=""
tttFlags=""

ttt_ckcmd_tcl_home=""
ttt_ckcmd_tk_home=""
ttt_ckcmd_blt_home=""
ttt_ckcmd_pcap_home=""
ttt_ckcmd_cc=""
ttt_ckcmd_ipv6="auto"

pcapLibrary=""
pcapRunPath=""

AC_ARG_WITH(tcl, [  --with-tcl=DIR          find Tcl headers and libraries in DIR],
  ttt_ckcmd_tcl_home=$withval)
AC_ARG_WITH(tk, [  --with-tk=DIR          find Tk headers and libraries in DIR],
  ttt_ckcmd_tk_home=$withval)
AC_ARG_WITH(blt, [  --with-blt=DIR          find BLT headers and libraries in DIR],
  ttt_ckcmd_blt_home=$withval)
AC_ARG_WITH(pcap, [  --with-pcap=DIR          find pcap headers and libraries in DIR],
  ttt_ckcmd_pcap_home=$withval)
AC_ARG_WITH(cflags, [  --with-cflags=VAL        set CFLAGS to VAL],
  ttt_ckcmd_cflags=$withval)
AC_ARG_WITH(cc, [  --with-cc=CC		  set C compiler to CC], [
  ttt_ckcmd_cc=$with_cc 
  unset ac_cv_prog_CC
  unset ac_cv_prog_CPP ])
AC_ARG_ENABLE(ipv6,
        [  --enable-ipv6          ipv6 support.],
        [ttt_ckcmd_ipv6=$enableval], [ttt_ckcmd_ipv6="auto"])


AC_CANONICAL_SYSTEM

# -----------------------------------------------------------------------
#
# 	Set a variable containing current working directory if /bin/sh
#	doesn't do it already.
#
# -----------------------------------------------------------------------

PWD=`pwd`

# -----------------------------------------------------------------------
#
# 	C compiler and debugging flags
#
# -----------------------------------------------------------------------

ttt_ckenv_cc=$CC

#
# CC search order
#
#  1. command line (--with-cc)
#  2. environment variable ($CC)
#  3. cached variable ($ttt_cv_prog_cc)
#  4. check for program (AC_PROG_CC)
#  4. default to cc
#

AC_MSG_CHECKING([which C compiler])
if test "x${ttt_ckcmd_cc}" != "x" ; then 
  CC=${ttt_ckcmd_cc}
  unset ac_cv_prog_CPP
  unset ac_cv_prog_CC
elif test "x${ttt_ckenv_cc}" != "x" ; then
  unset ac_cv_prog_CPP
  unset ac_cv_prog_CC
elif test "x${ttt_cv_prog_cc}" != "x" ; then
  CC=${ttt_cv_prog_cc}
  unset ac_cv_prog_CC
else 
  AC_PROG_CC
fi
if test "x${CC}" = "x" ; then
  CC=cc
fi
AC_MSG_RESULT([$CC])

unset ttt_cv_prog_cc
AC_CACHE_VAL(ttt_cv_prog_cc, ttt_cv_prog_cc=$CC)
AC_SUBST(CC)
AC_PROG_CPP
if test "x${GCC}" != "x" ; then
  tttHaveGcc="yes"
else
  AC_MSG_CHECKING([if C compiler is really gcc])
    AC_EGREP_CPP(_cc_is_gcc_, [
#ifdef __GNUC__
    _cc_is_gcc_
#endif
],      [tttHaveGcc=yes], [tttHaveGcc=no])
  AC_MSG_RESULT([$tttHaveGcc])
fi

if test "${tttHaveGcc}" = "yes" ; then
  GCCFLAGS=""
else 
  GCCFLAGS=""
fi
AC_SUBST(GCCFLAGS)

#
# CFLAGS search order
#
#  1. command line (--with-cflags)
#  2. cached variable ($ttt_cv_prog_cflags)
#  3. set to "-O2" if using gcc ($tttHaveGcc)
#  4. otherwise, default to "-O"
#
AC_MSG_CHECKING([default compiler flags])
if test  "x${ttt_ckcmd_cflags}" != "x" ; then 
  CFLAGS=${ttt_ckcmd_cflags}
elif test "x${ttt_cv_prog_cflags}" != "x" ; then
  CFLAGS=${ttt_cv_prog_cflags}
elif test "${tttHaveGcc}" = "yes" ; then
  CFLAGS="-O2 -Wall"
else
  CFLAGS="-O -Wall"
fi
AC_MSG_RESULT([$CFLAGS])
unset ttt_cv_prog_cflags
AC_CACHE_VAL(ttt_cv_prog_cflags, ttt_cv_prog_cflags=$CFLAGS)
AC_SUBST(CFLAGS)

# -----------------------------------------------------------------------
#
# Programs:	Check for existence of install program
#
# -----------------------------------------------------------------------

AC_PROG_INSTALL

# -----------------------------------------------------------------------
#
# Headers:	Check for header files used
#
# -----------------------------------------------------------------------

AC_HEADER_STDC
AC_CHECK_HEADERS(sys/sockio.h)
AC_CHECK_HEADERS(sys/queue.h)

# -----------------------------------------------------------------------
#
# Functions: 	Check for  gethostent
#
# -----------------------------------------------------------------------

AC_HAVE_FUNCS(gethostent)

# -----------------------------------------------------------------------
#
#	Find the Tcl build configuration file "tclConfig.sh"
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([for tclConfig.sh])
tclConfigFile=""

guesses="\
 $ttt_ckcmd_tcl_home \
 $ttt_ckcmd_tcl_home/lib \
 $ttt_cv_tcl_lib \
 /usr/local/lib/tcl8.4 \
 /usr/local/lib/tcl8.3 \
 /usr/local/lib/tcl8.2 \
 /usr/pkg/lib \
 /usr/local/tcl/lib \
 /usr/local/tcl/tcl8.4/lib \
 /usr/local/tcl/tcl8.3/lib \
 /usr/local/tcl/tcl8.2/lib \
 /usr/lib/tcl8.4 \
 /usr/lib/tcl8.3 \
 /usr/lib/tcl8.2 \
 $PWD/../tcl8.4 \
 $PWD/../tcl8.3 \
 $PWD/../tcl8.2 \
 $libdir \
 $prefix/lib \
 $exec_prefix/lib \
 /usr/local/lib /usr/lib"

for dir in $guesses; do
  if test -r "$dir/tclConfig.sh" ; then
    tclConfigFile="$dir/tclConfig.sh"
    break
  fi
done
AC_MSG_RESULT([${tclConfigFile}])

if test "x$tclConfigFile" = "x" ; then
  echo "can't find Tcl configuration script \"tclConfig.sh\""
  exit 1
fi

# -----------------------------------------------------------------------
#
#	Find the X11R6 includes and libraries
#
# -----------------------------------------------------------------------

AC_PATH_X

# -----------------------------------------------------------------------
#
#	Find the Tk build configuration file "tkConfig.sh"
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([for tkConfig.sh])
tkConfigFile=""
guesses="\
 $ttt_ckcmd_tk_home \
 $ttt_ckcmd_tk_home/lib \
 $ttt_ckcmd_tcl_home \
 $ttt_ckcmd_tcl_home/lib \
 $ttt_cv_tk_lib \
 /usr/local/lib/tk8.4 \
 /usr/local/lib/tk8.3 \
 /usr/local/lib/tk8.2 \
 /usr/pkg/lib \
 /usr/local/tcl/lib \
 /usr/local/tcl/tk8.4/lib \
 /usr/local/tcl/tk8.3/lib \
 /usr/local/tcl/tk8.2/lib \
 /usr/lib/tk8.4 \
 /usr/lib/tk8.3 \
 /usr/lib/tk8.2 \
 $PWD/../tk8.4 \
 $PWD/../tk8.3 \
 $PWD/../tk8.2 \
 $libdir \
 $prefix/lib \
 $exec_prefix/lib \
 /usr/local/lib /usr/lib"

for dir in $guesses; do
  if test -r "$dir/tkConfig.sh" ; then
    tkConfigFile="$dir/tkConfig.sh"
    break
  fi
done
AC_MSG_RESULT([${tkConfigFile}])

# -----------------------------------------------------------------------
#
#	Find the [incr Tcl] build configuration file "itclConfig.sh"
#
#	If we find one, use this directory's versions of tclConfig.sh
#	and tkConfig.sh.   This will point us to versions of Tcl and
#	Tk with namespace support.
#
# -----------------------------------------------------------------------

AC_MSG_CHECKING([for itclConfig.sh])
itclConfigFile=""
guesses="\
 $ttt_ckcmd_tk_home \
 $ttt_ckcmd_tk_home/lib \
 $ttt_ckcmd_tcl_home \
 $ttt_ckcmd_tcl_home/lib \
 $ttt_cv_tk_lib \
 /usr/local/lib/tk8.4 \
 /usr/local/lib/tk8.3 \
 /usr/local/lib/tk8.2 \
 /usr/local/lib/tcl8.4 \
 /usr/local/lib/tcl8.3 \
 /usr/local/lib/tcl8.2 \
 /usr/local/tcl/lib \
 /usr/pkg/lib \
 /usr/local/tcl/tk8.4/lib \
 /usr/local/tcl/tk8.3/lib \
 /usr/local/tcl/tk8.2/lib \
 /usr/local/tcl/tcl8.4/lib \
 /usr/local/tcl/tcl8.3/lib \
 /usr/local/tcl/tcl8.2/lib \
 /usr/lib/tk8.4 \
 /usr/lib/tk8.3 \
 /usr/lib/tk8.2 \
 $libdir \
 $prefix/lib \
 $exec_prefix/lib \
 $XLIBDIR \
 /usr/local/lib /usr/lib"

for dir in $guesses; do
  if test -r "$dir/itclConfig.sh" ; then
    itclConfigFile="$dir/itclConfig.sh"
    if test -r "$dir/tclConfig.sh" ; then
      tclConfigFile="$dir/tclConfig.sh"
    fi
    if test -r "$dir/tkConfig.sh" ; then
      tkConfigFile="$dir/tkConfig.sh"
    fi
    break
  fi
done
AC_MSG_RESULT([${itclConfigFile}])

# -----------------------------------------------------------------------
#
#	Source in the Tcl/Tk/[incr Tcl] configuration scripts.  
#
#	First source the Tcl/Tk scripts.  Then source the [incr Tcl]
#	scripts, if needed.  The variables [incr Tcl] script will
#	override those of the the tclConfig.sh or tkConfig.sh
#
#	BTW: Does anyone actually use the tclConfig.sh and tkConfig.sh 
#	scripts? They seem to be always missing something.  For example, 
#	why don't they say where to find the Tcl and Tk header files?
#
#       For example, give me the library directory paths separately 
#	(I can't easily parse "-Ldir", but I can always paste a -L 
#	on the front).  If I want to specify equivalent of the -R flag, 
#	I need the build a path of the library directories. Such as
#
#	   "-R $(BLTLIB):$(TKLIB):$(TCLLIB):($XLIB)"
#
# -----------------------------------------------------------------------

if test "x$tkConfigFile" != "x" ; then
  . $tclConfigFile
  . $tkConfigFile
fi

tclIncSpec="-I${TCL_PREFIX}/include"
tkIncSpec="-I${TK_PREFIX}/include"
tclLibDir=${TCL_PREFIX}/lib
tkLibDir=${TK_PREFIX}/lib

case $target in
  *-freebsd*|*-netbsd*|*-openbsd*|*-sunos4*|*-linux-*)
    tclIncSpec="-I${TCL_PREFIX}/include/tcl${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}"
    tkIncSpec="-I${TK_PREFIX}/include/tk${TK_MAJOR_VERSION}.${TK_MINOR_VERSION}"
    ;;
esac

itclLibSpec=""
itclIncSpec=""
itclSuffix=""
# if test "x$itclConfigFile" != "x" ; then
#   . $itclConfigFile
#   tclIncSpec="-I${TCL_PREFIX}/include/itcl"
#   tkIncSpec="-I${TK_PREFIX}/include/itcl"
#   tclLibDir=${TCL_PREFIX}/lib/itcl
#   tkLibDir=${TK_PREFIX}/lib/itcl
#   itclSuffix="i"
# fi

tclLibSpec=${TCL_LIB_SPEC}
tkLibSpec=${TK_LIB_SPEC}

case $target in
  *-freebsd*|*-netbsd*|*-openbsd*|*-sunos4*)
    tclLib="-ltcl${TCL_MAJOR_VERSION}${TCL_MINOR_VERSION}${itclSuffix}"
    tkLib="-ltk${TK_MAJOR_VERSION}${TK_MINOR_VERSION}${itclSuffix}"
    ;;
  *)
    tclLib="-ltcl${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}${itclSuffix}"
    tkLib="-ltk${TK_MAJOR_VERSION}.${TK_MINOR_VERSION}${itclSuffix}"
    ;;
esac

# -----------------------------------------------------------------------
# 
# Tk libraries and header files
#
# -----------------------------------------------------------------------
if test "${bltIncSpec}" != "${tkIncSpec}" ; then
  tttIncludes="${tttIncludes} ${tkIncSpec}"
fi

if test "${bltLibDir}" = "${tkLibDir}" ; then
  tttLibraries="${tttLibraries} ${tkLib}"
else 
  tttLibraries="${tttLibraries} ${tkLibSpec}"
  if test "x${tkLibDir}" != "x" ; then
    tttRunPath="${tttRunPath}:${tkLibDir}"
  fi
fi

# -----------------------------------------------------------------------
# 
# Tcl libraries and header files
#
# Add a header file directory specification only if the Tcl headers reside 
# in a different directory from Tk's.  
#
#
# -----------------------------------------------------------------------
if test "${tkIncSpec}" != "${tclIncSpec}" ; then
  tttIncludes="${tttIncludes} ${tclIncSpec}"
fi

if test "${tkLibDir}" = "${tclLibDir}" ; then
  tttLibraries="${tttLibraries} ${tclLib}"
else 
  tttLibraries="${tttLibraries} ${tclLibSpec}"
  if test "x${tclLibDir}" != "x" ; then
    tttRunPath="${tttRunPath}:${tclLibDir}"
  fi
fi

# -----------------------------------------------------------------------
# 
# [incr Tcl] include files
#
# -----------------------------------------------------------------------
if test "x${itclIncSpec}" != "x" ; then
  tttIncludes="${itclIncSpec} ${tttIncludes}"
fi

# -----------------------------------------------------------------------
# 
# [incr Tcl] libraries
#
# -----------------------------------------------------------------------
if test "x${itclLibSpec}" != "x" ; then
  tttLibraries="${itclLibSpec} ${tttLibraries}"
fi


# -----------------------------------------------------------------------
#
#	Find the BLT header "blt.h" and library "libBLT.a"
#
# -----------------------------------------------------------------------

bltIncDir=""
bltLibDir=""
bltIncSpec=""
bltLibSpec=""

AC_MSG_CHECKING([for blt.h])
bltHdrFile=""
guesses="\
 $ttt_ckcmd_blt_home \
 $ttt_ckcmd_blt_home/include \
 $prefix/include/blt \
 $prefix/include \
 $exec_prefix/include/blt \
 $exec_prefix/include \
 /usr/local/include \
 /usr/local/blt/include \
 /usr/pkg/include \
 /usr/include/blt \
 /usr/include"

for dir in $guesses; do
  if test -r "$dir/blt.h" ; then
    bltHdrFile="$dir/blt.h"
    bltIncDir="$dir"
    bltIncSpec="-I$dir"
    break
  fi
done
AC_MSG_RESULT([${bltHdrFile}])

if test "x$bltHdrFile" = "x" ; then
  echo "can't find BLT header file \"blt.h\""
  exit 1
fi

AC_MSG_CHECKING([for libBLT.a])
bltLibFile=""
guesses="\
 $ttt_ckcmd_blt_home \
 $ttt_ckcmd_blt_home/lib \
 $libdir \
 $prefix/lib \
 $exec_prefix/lib \
 /usr/local/lib \
 /usr/local/blt/lib \
 /usr/pkg/lib \
 /usr/lib"

for dir in $guesses; do
  if test -r "$dir/libBLT24.so" ; then
    bltLibFile="$dir/libBLT24.so"
    bltLibDir="$dir"
    bltLibSpec="-L$dir -lBLT24"
    break
  elif test -r "$dir/libBLT24.a" ; then
    bltLibFile="$dir/libBLT24.a"
    bltLibDir="$dir"
    bltLibSpec="-L$dir -lBLT24"
    break
  elif test -r "$dir/libBLT.2.4.a" ; then
    bltLibFile="$dir/libBLT.2.4.a"
    bltLibDir="$dir"
    bltLibSpec="-L$dir -lBLT.2.4"
    break
  elif test -r "$dir/libBLT.2.4.${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}.a" ; then
    bltLibFile="$dir/libBLT.2.4.${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}.a"
    bltLibDir="$dir"
    bltLibSpec="-L$dir -lBLT.2.4.${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}"
    break
  elif test -r "$dir/libBLT.a" ; then
    bltLibFile="$dir/libBLT.a"
    bltLibDir="$dir"
    bltLibSpec="-L$dir -lBLT"
    break
  fi
done
AC_MSG_RESULT([${bltLibFile}])

if test "x$bltLibFile" = "x" ; then
  echo "can't find BLT library file \"libBLT.a\""
  exit 1
fi

# -----------------------------------------------------------------------
# 
# BLT include files and libraries
#
# -----------------------------------------------------------------------
tttIncludes="${tttIncludes} ${bltIncSpec}"
tttLibraries="${tttLibraries} ${bltLibSpec}"
tttRunPath="${tttRunPath}:${bltLibDir}"

# -----------------------------------------------------------------------
# 
# -lX11
#
# -----------------------------------------------------------------------

if test "${tkLibDir}" = "${x_libraries}" ; then
  tttLibraries="${tttLibraries} -lX11"
else 
  tttLibraries="${tttLibraries} -L${x_libraries} -lX11"
  if test "x${tclLibDir}" != "x" ; then
    tttRunPath="${tttRunPath}:${x_libraries}"
  fi
fi
if test "${tkIncDir}" != "${x_includes}" ; then
  tttIncludes="${tttIncludes} -I${x_includes}"
fi

# -----------------------------------------------------------------------
# 
# PCAP header and library
#
# -----------------------------------------------------------------------
AC_MSG_CHECKING([for pcap.h])
pcapHdrFile=""

guesses="\
 $ttt_ckcmd_pcap_home \
 $ttt_ckcmd_pcap_home/include \
 $prefix/include \
 /usr/local/include /usr/include"

for dir in $guesses; do
  if test -r "$dir/pcap.h" ; then
    pcapHdrFile="$dir/pcap.h"
    break
  fi
done

AC_MSG_RESULT([${pcapHdrFile}])

if test "x$pcapHdrFile" = "x" ; then
  echo "can't find pcap header \"pcap.h\""
  echo "use \"--with-pcap=DIR\" to specify pcap directory"
  exit 1
fi
if test "${dir}" != "/usr/include" ; then
      tttIncludes="${tttIncludes} -I${dir}"
fi

if test "${ttt_ckcmd_pcap_home}" != "no" ; then
  if test "x${ttt_ckcmd_pcap_home}" = "x" ; then
    spec="-lpcap"
    dir=""
  else
    spec="-L${ttt_ckcmd_pcap_home} -lpcap"
    dir=${ttt_ckcmd_pcap_home}
  fi
  AC_CHECK_LIB(pcap, main, [found=yes], [found=no], $spec)
  if test "${found}" = "yes" ; then
    tttLibraries="${tttLibraries} ${spec}"
    pcapLibrary="${spec}"
    if test "x${dir}" != "x" ; then
      tttRunPath="${tttRunPath}:${dir}"
      pcapRunPath="${dir}"
    fi
  else
    echo "can't find pcap library file \"libpcap.a\""
    exit 1
  fi
fi

# -----------------------------------------------------------------------
# 
# -lsocket
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(socket, main)

# -----------------------------------------------------------------------
# 
# -lnsl
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(nsl, main)

# -----------------------------------------------------------------------
# 
# -lm
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(m, main)

# -----------------------------------------------------------------------
# 
# -ldl
#
# -----------------------------------------------------------------------
AC_CHECK_LIB(dl, main)

# -----------------------------------------------------------------------
#
# 	Set up a new default prefix to installation path.  The ways
#	the prefix can be set and their precedence are as follows:
#
#	1. --prefix option given to ./configure. (prefix != NONE)
#       2. use previously configured Tk prefix
#
# -----------------------------------------------------------------------

if test "$prefix" = "NONE" ; then
  prefix=${TK_PREFIX}
fi

if test "$exec_prefix" = "NONE" ; then
  exec_prefix=$prefix
fi

# -------------------------------------------------------------------------
#
#	Check for [incr Tcl] header files
#
# -------------------------------------------------------------------------

oldFlags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $tttIncludes"
AC_CHECK_HEADERS(itcl.h)
AC_CHECK_HEADERS(itk.h)
CPPFLAGS=$oldFlags

#---------------------------------------------------------------
#
#  IPv6 support
#
#---------------------------------------------------------------
AC_MSG_CHECKING(for IPv6 support)
if test "$ttt_ckcmd_ipv6" = auto; then
        AC_TRY_COMPILE([#define INET6
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>],
                [int x = IPPROTO_IPV6; struct in6_addr a;],
                [ac_cv_ipv6="yes"], [ac_cv_ipv6="no"])
else
	ac_cv_ipv6="$ttt_ckcmd_ipv6"
fi

if test "$ac_cv_ipv6" = yes; then
         tttFlags="-DIPV6 ${tttFlags}"
fi
AC_MSG_RESULT($ac_cv_ipv6)

# -------------------------------------------------------------------------
#
#	misaligned access
#
# -------------------------------------------------------------------------

case "$target_cpu" in
  alpha|hp*|mips|sparc)
    tttFlags="-DALIGN_WORD ${tttFlags}"
    ;;
esac

# -------------------------------------------------------------------------
#
#	compilation environment
#
# -------------------------------------------------------------------------

tttLibraries="${tttLibraries} ${LIBS}"

case $target in
  *-solaris2*)
    LDFLAGS="-R ${tttRunPath}"
    tttLibraries="${tttLibraries} -ldl"
    pcapLibrary="${pcapLibrary} -ldl"
    if test "x${pcapRunPath}" != "x" ; then 
       PCAP_LDFLAGS="-R ${pcapRunPath}"
    fi
    ;;

  *-freebsd*)
    ;;

  *-netbsd*|*-openbsd*)
    LDFLAGS="-R ${tttRunPath}"
    if test "x${pcapRunPath}" != "x" ; then 
       PCAP_LDFLAGS="-R ${pcapRunPath}"
    fi
    ;;

  *-bsdi*)
    tttLibraries="${tttLibraries} -ldl"
    pcapLibrary="${pcapLibrary} -ldl"
    ;;

  *-linux*)
    tttFlags="-D_BSD_SOURCE ${tttFlags}"
    tttLibraries="${tttLibraries} -ldl"
    pcapLibrary="${pcapLibrary} -ldl"
    if test "x${pcapRunPath}" != "x" ; then 
       PCAP_LDFLAGS="-R ${pcapRunPath}"
    fi
    ;;

  *)
    ;;
esac

AC_SUBST(LDFLAGS)
INCLUDES=${tttIncludes}
AC_SUBST(INCLUDES)
LIBS=${tttLibraries}
AC_SUBST(LIBS)

TTT_LIBDIR="$libdir/ttt"
AC_SUBST(TTT_LIBDIR)
TTT_FLAGS=${tttFlags}
AC_SUBST(TTT_FLAGS)

PCAP_LIB="${PCAP_LDFLAGS} ${pcapLibrary}"
AC_SUBST(PCAP_LIB)

#--------------------------------------------------------------------
#	Print out some of the more important settings 
#--------------------------------------------------------------------
echo ""
echo "Configuration results:"
echo ""
echo "  tcl.h      found in  $tclIncSpec"
echo "  tk.h       found in  $tkIncSpec"
echo "  blt.h      found in  $bltIncSpec"
echo "  X11/Xlib.h found in  -I$x_includes"
echo "  libtcl     found in  $tclLibSpec"
echo "  libtk      found in  $tkLibSpec"
echo "  libBLT     found in  $bltLibSpec"
echo "  libX11     found in  -L$x_libraries -lX11"
echo ""
echo "Directories where TTT is to be installed:"
echo ""
echo "  \"\$prefix\" is $prefix"
echo "  \"\$exec_prefix\" is $exec_prefix"
echo ""
echo "  ttt          to be installed in  $bindir"
echo "  scripts      to be installed in  $TTT_LIBDIR"
echo "  manual pages to be installed in  $mandir"
echo ""
#echo "  DEFS:  $DEFS"
#echo "  INCLUDES:  $INCLUDES"
#echo "  LIBS:  $LIBS"
#echo "  LDFLAGS:  $LDFLAGS"
#echo "  TTT_FLAGS:  $TTT_FLAGS"
#echo "  PCAP_LIB:  $PCAP_LIB"
echo ""

#--------------------------------------------------------------------
#
#	Generate Makefile
#
#--------------------------------------------------------------------

AC_OUTPUT(Makefile)
